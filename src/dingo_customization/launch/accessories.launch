<!--
Launch driver components of Dingo's supported accessories.

Be careful that the defaults in this file are kept aligned with those
in the URDF. See dingo_description/urdf/accessories.urdf.xacro.
-->
<launch>
<group ns="$(optenv DINGO_CUSTOM_NAME d)">
  <!--
    Primary LMS1xx-series LIDAR, typically front-facing.
    By default this is a SICK LMS1xx but can be changed with the
    DINGO_LASER_MODEL environment variable. Valid model designations are:
    - lms1xx (default) :: SICK LMS1xx
    - ust10            :: Hokuyo UST10
  -->
  <group if="$(optenv DINGO_LASER 0)">
    <arg name="lidar_model" value="$(optenv DINGO_LASER_MODEL lms1xx)" />
    <!-- UST10 node -->
    <group if="$(eval arg('lidar_model') == 'ust10')">
      <node pkg="urg_node" name="hokuyo" type="urg_node" output="screen">
        <param name="ip_address" value="$(optenv DINGO_LASER_HOST 192.168.131.20)" />
        <param name="frame_id" value="$(optenv DINGO_LASER_MOUNT front)_laser" />
        <remap from="scan" to="$(optenv DINGO_LASER_TOPIC front/scan)" />
      </node>
    </group>
  </group>

  <!--
    Secondary 2D laser
    Same config options as above, but with "_SECONDARY" in all env vars
  -->
  <group if="$(optenv DINGO_LASER_SECONDARY 0)">
    <arg name="lidar2_model" value="$(optenv DINGO_LASER_SECONDARY_MODEL lms1xx)" />
    <!-- UST10 node -->
    <group if="$(eval arg('lidar2_model') == 'ust10')">
      <node pkg="urg_node" name="hokuyo_secondary" type="urg_node" output="screen">
        <param name="ip_address" value="$(optenv DINGO_LASER_SECONDARY_HOST 192.168.131.21)" />
        <param name="frame_id" value="$(optenv DINGO_LASER_SECONDARY_MOUNT rear)_laser" />
        <remap from="scan" to="$(optenv DINGO_LASER_SECONDARY_TOPIC rear/scan)" />
      </node>
    </group>
  </group>

  <!-- Launch Obstacle Detector -->
  <include file="$(find dingo_customization)/launch/obstacle_detector.launch">
    <arg name="fixed_frame_id" value="world_floor"/>
  </include>


  <!-- Microstrain IMU: GX3, GX5, GX25, etc. -->
  <group if="$(optenv DINGO_IMU_MICROSTRAIN 0)">
    <include file="$(find microstrain_inertial_driver)/launch/microstrain.launch">
      <arg name="namespace"              value="$(optenv DINGO_IMU_MICROSTRAIN_NAME microstrain)" />
      <arg name="node_name"              value="microstrain_inertial_driver" />
      <arg name="params_file"            value="$(find assistive_launch)/config/dingo_microstrain.yaml" />
    </include>
  </group>

  <!-- QORVO UWB tags -->
  <group if="$(optenv DINGO_UWB_TAGS 0)">
    <node name="uwb_right" pkg="uwb_reader" type="uwb_reader.py" output="screen">
        <rosparam file="$(find assistive_launch)/config/$(optenv DINGO_CUSTOM_NAME d)_uwb_1.yaml"/>
    </node>
    <node name="uwb_left" pkg="uwb_reader" type="uwb_reader.py" output="screen">
        <rosparam file="$(find assistive_launch)/config/$(optenv DINGO_CUSTOM_NAME d)_uwb_2.yaml"/>
    </node>

    <include file="$(find uwb_pose_publisher)/launch/uwb_pose_publisher.launch" >
      <arg name="config_file"              value="$(find assistive_launch)/config/$(optenv DINGO_CUSTOM_NAME d)_uwb_pose_publisher.yaml" />
      <arg name="antenna_calib_file"       value="$(find assistive_launch)/config/antenna_calibration.yaml" />
    </include>

    

  </group>

</group>
</launch>
